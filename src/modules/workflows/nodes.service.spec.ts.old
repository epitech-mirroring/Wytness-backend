import { Test, TestingModule } from '@nestjs/testing';
import { NodesService } from './nodes.service';
import { getRepositoryToken } from '@nestjs/typeorm';
import { WorkflowNode, WorkflowNodeNext } from '../../types/workflow';

const nodeArray: WorkflowNode[] = [];
const nodeNextArray: WorkflowNodeNext[] = [];

const oneNode = new WorkflowNode(1, {});
const oneNodeNext = new WorkflowNodeNext();

describe('NodesService', () => {
  let service: NodesService;
  let nodeRepository: any;
  let nodeNextRepository: any;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        NodesService,
        {
          provide: getRepositoryToken(WorkflowNode),
          useValue: {
            find: jest.fn().mockResolvedValue(nodeArray),
            findOneOrFail: jest.fn().mockResolvedValue(oneNode),
            create: jest.fn().mockReturnValue(oneNode),
            save: jest.fn(),
            update: jest.fn().mockResolvedValue(true),
            delete: jest.fn().mockResolvedValue(true),
          },
        },
        {
          provide: getRepositoryToken(WorkflowNodeNext),
          useValue: {
            find: jest.fn().mockResolvedValue(nodeNextArray),
            findOneOrFail: jest.fn().mockResolvedValue(oneNodeNext),
            create: jest.fn().mockReturnValue(oneNodeNext),
            save: jest.fn(),
            update: jest.fn().mockResolvedValue(true),
            delete: jest.fn().mockResolvedValue(true),
          },
        },
      ],
    }).compile();

    service = module.get<NodesService>(NodesService);
    nodeRepository = module.get(getRepositoryToken(WorkflowNode));
    nodeNextRepository = module.get(getRepositoryToken(WorkflowNodeNext));
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});
