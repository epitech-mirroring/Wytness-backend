// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int           @id @default(autoincrement())
  firebaseId String        @unique
  email      String        @unique
  name       String
  surname    String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  services   ServiceUser[]
  workflows  Workflow[]
  codes      Code[]
  policies   Policy[]      @relation("UserPolicy")
}

model Service {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  logo        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  nodes       Node[]
  users       ServiceUser[]
}

model ServiceUser {
  id        Int     @id @default(autoincrement())
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  customData Json @default("{}")

  @@unique([serviceId, userId])
}

model Code {
  id         Int      @id @default(autoincrement())
  code       Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  source     String
  customData Json     @default("{}")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

enum NodeType {
  TRIGGER
  ACTION
}

model Node {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        NodeType

  service      Service        @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId    Int
  WorkflowNode WorkflowNode[]
  fields       Field[]
}

model WorkflowNode {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId Int
  node       Node     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  nodeId     Int
  config     Json     @default("{}")

  previousNodes WorkflowNode[] @relation("NextNodes")
  nextNodes     WorkflowNode[] @relation("NextNodes")
}

model Workflow {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  nodes       WorkflowNode[]

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

enum FieldType {
  STRING
  NUMBER
  BOOLEAN
  DATE
}

model Field {
  id          Int      @id @default(autoincrement())
  title       String
  name        String
  description String
  type        FieldType
  nullable    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  nodeId      Int
  node        Node     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}
// ABAC

model Policy {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rules     Rule[]
  users     User[]   @relation("UserPolicy")
}

enum Effect {
  ALLOW
  DENY
}

model Rule {
  id           Int    @id @default(autoincrement())
  action       String
  effect       Effect
  resourceType String
  condition    String
  policyId     String
  policy       Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@unique([action, resourceType, effect, policyId])
}
